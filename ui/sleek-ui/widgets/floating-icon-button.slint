import { UIconButton, UIconButtonVariant, UIconButtonThemeColor } from "icon-button.slint";

export component UFloatingIconButton inherits VerticalLayout {
	// Layout placement
	in-out property <LayoutAlignment> vertical-alignment: start;
    in-out property <LayoutAlignment> horizontal-alignment: start;
    in-out property <length> layout-padding-top: 0px;
    in-out property <length> layout-padding-bottom: 0px;
    in-out property <length> layout-padding-left: 0px;
    in-out property <length> layout-padding-right: 0px;
	// Button's properties and callbacks
    in-out property <UIconButtonVariant> variant <=> btn.variant;
    in-out property <bool> enabled <=> btn.enabled;
    out property <bool> has-focus <=> btn.has-focus;
    out property <bool> has-hover <=> btn.has-hover;
    out property <bool> pressed <=> btn.pressed;
    in-out property <bool> loading <=> btn.loading;
    in-out property <image> icon <=> btn.icon;
	// Theming properties
    in-out property <length> t-border-radius <=> btn.t-border-radius;
    in-out property <length> t-border-width <=> btn.t-border-width;
    in-out property <length> t-icon-size <=> btn.t-icon-size;
    in-out property <length> t-padding-vertical <=> btn.t-padding-vertical;
    in-out property <length> t-padding-horizontal <=> btn.t-padding-horizontal;
    in-out property <UIconButtonThemeColor> t-background;
    in-out property <UIconButtonThemeColor> t-background-hover;
    in-out property <UIconButtonThemeColor> t-background-active;
    in-out property <UIconButtonThemeColor> t-background-checked;
    in-out property <UIconButtonThemeColor> t-background-disabled;
    in-out property <UIconButtonThemeColor> t-text-color;
    in-out property <UIconButtonThemeColor> t-text-color-hover;
    in-out property <UIconButtonThemeColor> t-text-color-active;
    in-out property <UIconButtonThemeColor> t-text-color-checked;
    in-out property <UIconButtonThemeColor> t-text-color-disabled;
    in-out property <UIconButtonThemeColor> t-border;
    in-out property <UIconButtonThemeColor> t-border-hover;
    in-out property <UIconButtonThemeColor> t-border-active;
    in-out property <UIconButtonThemeColor> t-border-checked;
    in-out property <UIconButtonThemeColor> t-border-disabled;
    callback clicked <=> btn.clicked;
	// TouchArea callbacks from UIconButton.
    callback double-clicked <=> btn.double-clicked;
    callback moved <=> btn.moved;
    callback pointer-event <=> btn.pointer-event;
    callback scroll-event <=> btn.scroll-event;
	// FocusScope callbacks from UIconButton.
	callback key-pressed <=> btn.key-pressed;
    callback key-released <=> btn.key-released;
    callback focus-changed-event <=> btn.focus-changed-event;
    alignment: vertical-alignment;
    HorizontalLayout {
        alignment: horizontal-alignment;
        padding-top: layout-padding-top;
        padding-bottom: layout-padding-bottom;
        padding-left: layout-padding-left;
        padding-right: layout-padding-right;
        btn := UIconButton { }
    }
}
