import { UAppTheme } from "../app-theme.slint";
import { UIcon } from "icon.slint";
import { UText } from "text.slint";


export component UInputNumber inherits Rectangle {
	// Accessability properties
	accessible-role: spinbox;
    accessible-read-only: input.read-only;
    accessible-value: self.value;
    accessible-value-step: self.step;
    accessible-value-minimum: self.enable-min-max ? self.min-value : 0;
    accessible-value-maximum: self.enable-min-max ? self.max-value : 0;
    accessible-action-default => {
        self.accepted()
    }
    accessible-action-set-value(value) => {
        input.text = value.to-float();
    }
    accessible-action-decrement => {
        btn-decrease.clicked();
    }
    accessible-action-increment => {
        btn-increase.clicked();
    }
	// Regular properties
    in-out property <float> value: 0;
    in-out property <bool> enabled <=> input.enabled;
    in-out property <float> step: 1;
    in-out property <bool> number: false;
    in-out property <bool> error: false;
    in-out property <bool> enable-min-max: false;
    in-out property <float> min-value: -100;
    in-out property <float> max-value: 100;
    border-width: UAppTheme.border-width-base;
    border-radius: UAppTheme.radius-base;
    border-color: UAppTheme.border;
    background: UAppTheme.bg-elevated;
    clip: true;
    HorizontalLayout {
        width: root.width;
        HorizontalLayout {
            padding-left: UAppTheme.padding-horizontal / 2;
            padding-right: UAppTheme.padding-horizontal / 2;
            Rectangle {
                height: UAppTheme.font-size-base + UAppTheme.padding-vertical * 3;
                clip: true;
                input := TextInput {
                    property <length> h-padding: UAppTheme.padding-horizontal / 2 * 2;
                    property <length> computed_x;
                    text: root.value;
                    width: max(parent.width, self.preferred-width);
                    x: min(computed_x, 0px);
                    input-type: root.number ? InputType.number : InputType.decimal;
                    read-only: !root.enabled;
                    font-size: UAppTheme.font-size-base;
                    color: UAppTheme.text;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                    single-line: true;
                    wrap: no-wrap;
					// Shamelessly taken from Surrealisme UI
					// Source : https://github.com/Surrealism-All/SurrealismUI/blob/main/src/input/input.slint
					cursor-position-changed(cpos) => {
                        if cpos.x + self.computed_x < self.h-padding {
                            self.computed_x = - cpos.x + self.h-padding;
                        } else if cpos.x + self.computed_x > parent.width - 1px {
                            self.computed_x = parent.width - cpos.x - 1px;
                        }
                    }
                    edited => {
                        root.value = self.text.to-float();
                        if root.enable-min-max {
                            if root.value <= root.min-value {
                                root.value = root.min-value;
                            } else if root.value >= root.max-value {
                                root.value = root.max-value;
                            }
                        }
                        self.text = root.value;
                    }
                    key-pressed(event) => {
                        if event.text == Key.UpArrow {
                            btn-increase.clicked();
                            return accept;
                        } else if event.text == Key.DownArrow {
                            btn-decrease.clicked();
                            return accept;
                        }
                        reject
                    }
                }
            }
        }

        VerticalLayout {
            alignment: center;
            padding-left: UAppTheme.padding-small;
            Rectangle {
                height: 100%;
                width: UAppTheme.icon-size-base + UAppTheme.padding-horizontal / 2;
                UIcon {
                    size: UAppTheme.icon-size-base;
                    colorize: UAppTheme.text-secondary;
                    source: @image-url("../assets/icons/chevron-down.svg");
                }

                btn-decrease := TouchArea {
                    accessible-role: button;
                    accessible-label: @tr("Decrease number input value.");
                    mouse-cursor: MouseCursor.pointer;
                    clicked => {
                        if !root.enabled {
                            return;
                        }
                        if root.enable-min-max && root.value <= root.min-value {
                            root.value = root.min-value;
                        } else {
                            root.value = input.text.to-float() - root.step;
                        }
                        input.text = root.value;
                        input.focus();
                    }
                }
            }
        }

        VerticalLayout {
            alignment: center;
            padding-left: UAppTheme.padding-small;
            Rectangle {
                height: 100%;
                width: UAppTheme.icon-size-base + UAppTheme.padding-horizontal / 2;
                UIcon {
                    size: UAppTheme.icon-size-base;
                    colorize: UAppTheme.text-secondary;
                    source: @image-url("../assets/icons/chevron-down.svg");
                    transform-rotation: 180deg;
                }

                btn-increase := TouchArea {
                    accessible-role: button;
                    accessible-label: @tr("Increase number input value.");
                    mouse-cursor: MouseCursor.pointer;
                    clicked => {
                        if !root.enabled {
                            return;
                        }
                        if root.enable-min-max && root.value >= root.max-value {
                            root.value = root.max-value;
                        } else {
                            root.value = input.text.to-float() + root.step;
                        }
                        input.text = root.value;
                        input.focus();
                    }
                }
            }
        }
    }

    states [
        disabled when !input.enabled: {
            background: UAppTheme.color-fill-quaternary;
            border-color: UAppTheme.border-secondary;
            input.color: UAppTheme.text-disabled;
        }
        error when error: {
            background: UAppTheme.bg-elevated;
            border-color: UAppTheme.danger.base;
        }
        active when input.has-focus: {
            background: UAppTheme.bg-elevated;
            border-color: UAppTheme.primary.active;
        }
    ]

	// Link the functions and callback of TextInput to child.
	public function set-selection-offsets(start: int, end: int) {
        input.set-selection-offsets(start, end);
    }
    public function select-all() {
        input.select-all();
    }
    public function clear-selection() {
        input.clear-selection();
    }
    public function copy() {
        input.copy();
    }
    public function cut() {
        input.cut();
    }
    public function paste() {
        input.paste();
    }
    callback accepted <=> input.accepted;
    callback cursor-position-changed <=> input.cursor-position-changed;
    callback edited <=> input.edited;
    callback key-pressed <=> input.key-pressed;
    callback key-released <=> input.key-released;
}
