import { UAppTheme } from "../app-theme.slint";

import { UButtonTheme, UButtonThemes, UButtonThemeColors } from "../widget-themes/button.slint";
import { ButtonInterface } from "../utils/button-interface.slint";
import { IconTextPlacement } from "../utils/structs.slint";

import { UIcon } from "icon.slint";
import { USpinner } from "spinner.slint";
import { UText } from "text.slint";


export component UButton inherits ButtonInterface {
	// Accessability properties
	accessible-role: button;
    accessible-label: self.text;
    accessible-action-default => {
        self.clicked()
    }
	// Regular properties
    in-out property <UButtonTheme> theme: UButtonThemes.default;
    property <UButtonThemeColors> theme-colors: danger ? theme.danger-colors : theme.base-colors;
    in-out property <string> text <=> text-obj.text;
    in-out property <bool> danger: false;
    in-out property <bool> loading: false;
    in-out property <bool> checked: false;
    in-out property <image> icon;
    in-out property <IconTextPlacement> icon-placement: IconTextPlacement.hidden;
    enabled: !loading;
    background: theme-colors.background;
    border-radius: theme.border-radius;
    border-width: self.has-focus ? UAppTheme.focus-border-width : theme.border-width;
    border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border;
    if loading: Rectangle {
        z: 10;
        width: parent.width;
        height: parent.height;
        border-radius: parent.theme.border-radius;
        border-width: theme.border-width;
        border-color: theme-colors.border;
        HorizontalLayout {
            alignment: center;
            VerticalLayout {
                alignment: center;
                USpinner {
                    colorize: theme-colors.text-color;
                }
            }
        }
    }
    HorizontalLayout {
        alignment: center;
        spacing: theme.content-spacing;
        padding-top: theme.padding-vertical;
        padding-bottom: theme.padding-vertical;
        padding-left: theme.padding-horizontal;
        padding-right: theme.padding-horizontal;
        if icon-placement == IconTextPlacement.start: VerticalLayout {
            alignment: center;
            icon-start := UIcon {
                visible: !loading;
                source: icon;
                colorize: theme-colors.text-color;
                size: theme.icon-size;
                animate colorize { duration: 200ms; }
                states [
                    loading when root.loading: {
                        colorize: transparent;
                    }
                    disabled when !root.enabled: {
                        colorize: theme-colors.text-color-disabled;
                    }
                    checked when root.checked: {
                        colorize: theme-colors.text-color-checked;
                    }
                    active when root.pressed: {
                        colorize: theme-colors.text-color-active;
                    }
                    hover when root.has-hover: {
                        colorize: theme-colors.text-color-hover;
                    }
                    checked when root.checked: {
                        colorize: theme-colors.text-color-checked;
                    }
                ]
            }
        }
        VerticalLayout {
            alignment: center;
            text-obj := UText {
                color: theme-colors.text-color;
                font-size: theme.font-size;
                animate color { duration: 200ms; }
				// Managing the text's states here as the states' order is different from the
				// component.
				states [
                    loading when root.loading: {
                        color: transparent;
                    }
                    disabled when !root.enabled: {
                        color: !root.loading ? theme-colors.text-color-disabled : transparent;
                    }
                    checked when root.checked: {
                        color: !root.loading ? theme-colors.text-color-checked : transparent;
                    }
                    active when root.pressed: {
                        color: !root.loading ? theme-colors.text-color-active : transparent;
                    }
                    hover when root.has-hover: {
                        color: !root.loading ? theme-colors.text-color-hover : transparent;
                    }
                ]
            }
        }

        if icon-placement == IconTextPlacement.end: VerticalLayout {
            alignment: center;
            icon-end := UIcon {
                visible: !loading;
                source: icon;
                colorize: theme-colors.text-color;
                size: theme.icon-size;
                animate colorize { duration: 200ms; }
                states [
                    loading when root.loading: {
                        colorize: transparent;
                    }
                    disabled when !root.enabled: {
                        colorize: theme-colors.text-color-disabled;
                    }
                    checked when root.checked: {
                        colorize: theme-colors.text-color-checked;
                    }
                    active when root.pressed: {
                        colorize: theme-colors.text-color-active;
                    }
                    hover when root.has-hover: {
                        colorize: theme-colors.text-color-hover;
                    }
                ]
            }
        }
    }

    states [
        loading when self.loading: {
            background: theme-colors.background;
        }
        disabled when !self.enabled: {
            background: theme-colors.background-disabled;
            border-color: theme-colors.border-disabled;
        }
        active when self.pressed: {
            background: theme-colors.background-active;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-active;
        }
        hover when self.has-hover: {
            background: theme-colors.background-hover;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-hover;
        }
        checked when self.checked: {
            background: theme-colors.background-checked;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-checked;
        }
    ]
}
