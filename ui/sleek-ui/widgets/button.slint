import { UAppTheme } from "../app-theme.slint";

import { ButtonInterface } from "../utils/button-interface.slint";
import { IconTextPlacement } from "../utils/structs.slint";

import { UIcon } from "icon.slint";
import { USpinner } from "spinner.slint";
import { UText } from "text.slint";


export struct UButtonThemeColors {
	background: brush,
	background-hover: brush,
	background-active: brush,
	background-checked: brush,
	background-disabled: brush,
	text-color: brush,
	text-color-hover: brush,
	text-color-active: brush,
	text-color-checked: brush,
	text-color-disabled: brush,
	border: brush,
	border-hover: brush,
	border-active: brush,
	border-checked: brush,
	border-disabled: brush,
}


export enum UButtonVariant {
	primary,
	default,
	filled,
	text,
}


export component UButton inherits ButtonInterface {
	// Accessability properties
	accessible-role: button;
    accessible-label: self.text;
    accessible-action-default => {
        self.clicked()
    }
	// Theming properties
	in-out property <length> t-border-width;
    in-out property <length> t-border-radius: UAppTheme.radius-base;
    in-out property <length> t-content-spacing: UAppTheme.spacing-base;
    in-out property <length> t-padding-vertical: UAppTheme.padding-vertical;
    in-out property <length> t-padding-horizontal: UAppTheme.padding-horizontal;
    in-out property <length> t-font-size: UAppTheme.font-size-base;
    in-out property <length> t-icon-size: UAppTheme.icon-size-base;
    in-out property <UButtonThemeColors> t-base-colors;
    in-out property <UButtonThemeColors> t-danger-colors;
	// Regular properties
    in-out property <UButtonVariant> variant: default;
    property <UButtonThemeColors> theme-colors: danger ? t-danger-colors : t-base-colors;
    in-out property <string> text <=> text-obj.text;
    in-out property <bool> danger: false;
    in-out property <bool> loading: false;
    in-out property <bool> checked: false;
    in-out property <image> icon;
    in-out property <IconTextPlacement> icon-placement: IconTextPlacement.hidden;
    enabled: !loading;
    background: theme-colors.background;
    border-radius: t-border-radius;
    border-width: self.has-focus ? UAppTheme.focus-border-width : t-border-width;
    border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border;
    if loading: Rectangle {
        z: 10;
        width: parent.width;
        height: parent.height;
        border-radius: t-border-radius;
        border-width: t-border-width;
        border-color: theme-colors.border;
        HorizontalLayout {
            alignment: center;
            VerticalLayout {
                alignment: center;
                USpinner {
                    colorize: theme-colors.text-color;
                }
            }
        }
    }
    HorizontalLayout {
        alignment: center;
        spacing: t-content-spacing;
        padding-top: t-padding-vertical;
        padding-bottom: t-padding-vertical;
        padding-left: t-padding-horizontal;
        padding-right: t-padding-horizontal;
        if icon-placement == IconTextPlacement.start: VerticalLayout {
            alignment: center;
            icon-start := UIcon {
                visible: !loading;
                source: icon;
                colorize: theme-colors.text-color;
                size: t-icon-size;
                animate colorize { duration: 200ms; }
                states [
                    loading when root.loading: {
                        colorize: transparent;
                    }
                    disabled when !root.enabled: {
                        colorize: theme-colors.text-color-disabled;
                    }
                    checked when root.checked: {
                        colorize: theme-colors.text-color-checked;
                    }
                    active when root.pressed: {
                        colorize: theme-colors.text-color-active;
                    }
                    hover when root.has-hover: {
                        colorize: theme-colors.text-color-hover;
                    }
                    checked when root.checked: {
                        colorize: theme-colors.text-color-checked;
                    }
                ]
            }
        }
        VerticalLayout {
            alignment: center;
            text-obj := UText {
                color: theme-colors.text-color;
                font-size: t-font-size;
                animate color { duration: 200ms; }
				// Managing the text's states here as the states' order is different from the
				// component.
				states [
                    loading when root.loading: {
                        color: transparent;
                    }
                    disabled when !root.enabled: {
                        color: !root.loading ? theme-colors.text-color-disabled : transparent;
                    }
                    checked when root.checked: {
                        color: !root.loading ? theme-colors.text-color-checked : transparent;
                    }
                    active when root.pressed: {
                        color: !root.loading ? theme-colors.text-color-active : transparent;
                    }
                    hover when root.has-hover: {
                        color: !root.loading ? theme-colors.text-color-hover : transparent;
                    }
                ]
            }
        }

        if icon-placement == IconTextPlacement.end: VerticalLayout {
            alignment: center;
            icon-end := UIcon {
                visible: !loading;
                source: icon;
                colorize: theme-colors.text-color;
                size: t-icon-size;
                animate colorize { duration: 200ms; }
                states [
                    loading when root.loading: {
                        colorize: transparent;
                    }
                    disabled when !root.enabled: {
                        colorize: theme-colors.text-color-disabled;
                    }
                    checked when root.checked: {
                        colorize: theme-colors.text-color-checked;
                    }
                    active when root.pressed: {
                        colorize: theme-colors.text-color-active;
                    }
                    hover when root.has-hover: {
                        colorize: theme-colors.text-color-hover;
                    }
                ]
            }
        }
    }

    states [
        loading when self.loading: {
            background: theme-colors.background;
        }
        disabled when !self.enabled: {
            background: theme-colors.background-disabled;
            border-color: theme-colors.border-disabled;
        }
        active when self.pressed: {
            background: theme-colors.background-active;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-active;
        }
        hover when self.has-hover: {
            background: theme-colors.background-hover;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-hover;
        }
        checked when self.checked: {
            background: theme-colors.background-checked;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-checked;
        }
    ]
    init => {
        if variant == UButtonVariant.primary {
            t-border-width = UAppTheme.border-width-base;
            t-base-colors = {
                background: UAppTheme.primary,
                background-hover: UAppTheme.primary-hover,
                background-active: UAppTheme.primary-active,
                background-checked: UAppTheme.primary,
                background-disabled: UAppTheme.border-secondary,
                text-color: Colors.white,
                text-color-hover: Colors.white,
                text-color-active: Colors.white,
                text-color-checked: Colors.white,
                text-color-disabled: UAppTheme.text-disabled,
                border-disabled: UAppTheme.border,
            };
            t-danger-colors = {
                background: UAppTheme.danger,
                background-hover: UAppTheme.danger-hover,
                background-active: UAppTheme.danger-active,
                background-checked: UAppTheme.danger,
                background-disabled: UAppTheme.border-secondary,
                text-color: Colors.white,
                text-color-hover: Colors.white,
                text-color-active: Colors.white,
                text-color-checked: Colors.white,
                text-color-disabled: UAppTheme.text-disabled,
                border-disabled: UAppTheme.border,
            };
        } else if variant == UButtonVariant.default {
            t-border-width = UAppTheme.border-width-base;
            t-base-colors = {
                background-active: UAppTheme.primary-selected,
                background-checked: UAppTheme.primary-selected,
                text-color:  UAppTheme.text,
                text-color-hover: UAppTheme.primary-hover,
                text-color-active: UAppTheme.primary-active,
                text-color-checked: UAppTheme.primary,
                text-color-disabled: UAppTheme.text-disabled,
                border:  UAppTheme.border,
                border-hover: UAppTheme.primary-hover,
                border-active: UAppTheme.primary-active,
                border-checked: UAppTheme.primary,
                border-disabled: UAppTheme.border,
            };
            t-danger-colors = {
                background-active: UAppTheme.danger-selected,
                background-checked: UAppTheme.danger-selected,
                text-color: UAppTheme.danger,
                text-color-hover: UAppTheme.danger-hover,
                text-color-active: UAppTheme.danger-active,
                text-color-checked: UAppTheme.danger,
                text-color-disabled: UAppTheme.text-disabled,
                border: UAppTheme.danger,
                border-hover: UAppTheme.danger-hover,
                border-active: UAppTheme.danger-active,
                border-checked: UAppTheme.danger,
                border-disabled: UAppTheme.border,
            };
        } else if variant == UButtonVariant.filled {
            t-base-colors = {
                background: UAppTheme.color-fill-tertiary,
                background-hover: UAppTheme.color-fill-secondary,
                background-active: UAppTheme.color-fill,
                background-checked: UAppTheme.primary-selected,
                text-color: UAppTheme.text,
                text-color-hover: UAppTheme.text,
                text-color-active: UAppTheme.text,
                text-color-checked: UAppTheme.primary,
                text-color-disabled: UAppTheme.text-disabled,
            };
            t-danger-colors = {
                background: UAppTheme.danger.with-alpha(0.1),
                background-hover: UAppTheme.danger-hover.with-alpha(0.3),
                background-active: UAppTheme.danger-active.with-alpha(0.4),
                background-checked: UAppTheme.danger-selected,
                text-color: UAppTheme.danger,
                text-color-hover: UAppTheme.danger-hover,
                text-color-active: UAppTheme.danger-active,
                text-color-checked: UAppTheme.danger,
                text-color-disabled: UAppTheme.text-disabled,
            };
        } else if variant == UButtonVariant.text {
            t-base-colors = {
                background-hover: UAppTheme.color-fill-secondary,
                background-active: UAppTheme.color-fill,
                text-color: UAppTheme.text,
                text-color-hover: UAppTheme.text,
                text-color-active: UAppTheme.text,
                text-color-checked: UAppTheme.primary,
                text-color-disabled: UAppTheme.text-disabled,
            };
            t-danger-colors = {
                background-hover: UAppTheme.danger-hover.with-alpha(0.1),
                background-active: UAppTheme.danger-active.with-alpha(0.3),
                text-color: UAppTheme.danger,
                text-color-hover: UAppTheme.danger-hover,
                text-color-active: UAppTheme.danger-active,
                text-color-checked: UAppTheme.danger,
                text-color-disabled: UAppTheme.text-disabled,
            };
        }
    }
}
