import { UAppTheme } from "../../app-theme.slint";

import { UButtonTheme, UButtonThemes, UButtonThemeColor } from "theme.slint";

import { ButtonInterface } from "../button-interface.slint";
import { IconTextPlacement } from "../../structs/icon-placement.slint";

import { UIcon } from "../icon.slint";
import { USpinner } from "../spinner.slint";
import { UText } from "../text.slint";


export enum UButtonVariant {
	primary,
	default,
	filled,
	text,
}


export component UButton inherits ButtonInterface {
	// Accessability properties
	accessible-role: button;
    accessible-label: self.text;
    accessible-action-default => {
        self.clicked()
    }
	// Regular properties
    in-out property <UButtonVariant> variant: default;
    property <UButtonTheme> theme: {
        if variant == UButtonVariant.primary {
            return UButtonThemes.primary;
        }
        if variant == UButtonVariant.filled {
            return UButtonThemes.filled;
        }
        if variant == UButtonVariant.text {
            return UButtonThemes.text;
        }
        return UButtonThemes.default;
    };
    in-out property <string> text <=> text-obj.text;
    in-out property <bool> danger: false;
    in-out property <bool> loading: false;
    in-out property <bool> checked: false;
    in-out property <image> icon;
    in-out property <bool> colorize-icon: true;
    in-out property <IconTextPlacement> icon-placement: IconTextPlacement.hidden;
    enabled: !loading;
    background: get-color(theme.bg);
    border-radius: UAppTheme.radius-base;
    border-width: self.has-focus ? UAppTheme.focus-border-width : theme.border-width;
    border-color: self.has-focus ? UAppTheme.focus-color : get-color(theme.border);
    if loading: Rectangle {
        z: 10;
        width: parent.width;
        height: parent.height;
        border-radius: UAppTheme.radius-base;
        border-width: theme.border-width;
        border-color: get-color(theme.border);
        HorizontalLayout {
            alignment: center;
            VerticalLayout {
                alignment: center;
                USpinner {
                    colorize: get-color(theme.text);
                    states [
                        disabled when !root.enabled: {
                            colorize: get-color(theme.text-disabled);
                        }
                    ]
                }
            }
        }
    }
    HorizontalLayout {
        alignment: center;
        spacing: UAppTheme.spacing-base;
        padding-top: UAppTheme.padding-vertical;
        padding-bottom: UAppTheme.padding-vertical;
        padding-left: UAppTheme.padding-horizontal;
        padding-right: UAppTheme.padding-horizontal;
        if icon-placement == IconTextPlacement.start: VerticalLayout {
            alignment: center;
            icon-start := UIcon {
                visible: !loading;
                source: icon;
                colorize: colorize-icon ? get-color(theme.text) : transparent;
                size: UAppTheme.icon-size-base;
                animate colorize { duration: 200ms; }
                states [
                    loading when root.loading: {
                        colorize: transparent;
                    }
                    disabled when !root.enabled: {
                        colorize: colorize-icon ? get-color(theme.text-disabled) : transparent;
                    }
                    checked when root.checked: {
                        colorize: colorize-icon ? get-color(theme.text-checked) : transparent;
                    }
                    active when root.pressed: {
                        colorize: colorize-icon ? get-color(theme.text-active) : transparent;
                    }
                    hover when root.has-hover: {
                        colorize: colorize-icon ? get-color(theme.text-hover) : transparent;
                    }
                ]
            }
        }
        VerticalLayout {
            alignment: center;
            text-obj := UText {
                color: get-color(theme.text);
                font-size: UAppTheme.font-size-base;
                animate color { duration: 200ms; }
				// Managing the text's states here as the states' order is different from the
				// component.
				states [
                    loading when root.loading: {
                        color: transparent;
                    }
                    disabled when !root.enabled: {
                        color: !root.loading ? get-color(theme.text-disabled) : transparent;
                    }
                    checked when root.checked: {
                        color: !root.loading ? get-color(theme.text-checked) : transparent;
                    }
                    active when root.pressed: {
                        color: !root.loading ? get-color(theme.text-active) : transparent;
                    }
                    hover when root.has-hover: {
                        color: !root.loading ? get-color(theme.text-hover) : transparent;
                    }
                ]
            }
        }

        if icon-placement == IconTextPlacement.end: VerticalLayout {
            alignment: center;
            icon-end := UIcon {
                visible: !loading;
                source: icon;
                colorize: colorize-icon ? get-color(theme.text) : transparent;
                size: UAppTheme.icon-size-base;
                animate colorize { duration: 200ms; }
                states [
                    loading when root.loading: {
                        colorize: transparent;
                    }
                    disabled when !root.enabled: {
                        colorize: colorize-icon ? get-color(theme.text-disabled) : transparent;
                    }
                    checked when root.checked: {
                        colorize: colorize-icon ? get-color(theme.text-checked) : transparent;
                    }
                    active when root.pressed: {
                        colorize: colorize-icon ? get-color(theme.text-active) : transparent;
                    }
                    hover when root.has-hover: {
                        colorize: colorize-icon ? get-color(theme.text-hover) : transparent;
                    }
                ]
            }
        }
    }

    function get-color(c: UButtonThemeColor) -> brush {
        return self.danger ? c.danger : c.base;
    }

    states [
        disabled when !root.enabled: {
            background: get-color(theme.bg-disabled);
            border-color: get-color(theme.border-disabled);
        }
        checked when root.checked: {
            background: get-color(theme.bg-checked);
            border-color: get-color(theme.border-checked);
        }
        active when root.pressed: {
            background: get-color(theme.bg-active);
            border-color: get-color(theme.border-active);
        }
        hover when root.has-hover: {
            background: get-color(theme.bg-hover);
            border-color: get-color(theme.border-hover);
        }
    ]
}
