import { UAppTheme } from "../app-theme.slint";

import { URadioTheme, URadioThemes } from "../widget-themes/radio.slint";
import { ButtonInterface } from "../utils/button-interface.slint";
import { UText } from "text.slint";

component URadioOption inherits ButtonInterface {
	// Accessability properties
	accessible-role: checkbox;
    accessible-label: self.option;
    accessible-item-selectable: true;
    accessible-item-selected: self.option == self.selected-value;
    accessible-action-default => {
        self.clicked();
    }
	// Regular properties
    in property <URadioTheme> theme;
    in-out property <string> option;
    in-out property <string> selected-value;
    callback selected(value: string);
    clicked => {
        self.selected-value = self.option;
        selected(self.option);
    }
    changed selected-value => {
        if selected-value != self.option {
        }
    }
    HorizontalLayout {
        alignment: start;
        spacing: theme.radio-text-spacing;

        VerticalLayout {
            alignment: center;
            Rectangle {
                width: theme.main-circle-size;
                height: theme.main-circle-size;
                background: theme.background;
                border-width: theme.main-circle-border-width;
                border-radius: UAppTheme.radius-circle;
                border-color: UAppTheme.border;
                animate background, border-color {
                    easing: ease;
                    duration: 200ms;
                }
                HorizontalLayout {
                    alignment: center;
                    VerticalLayout {
                        alignment: center;
                        Rectangle {
                            opacity: root.selected-value == root.option ? 1 : 0;
                            width: theme.dot-circle-size;
                            height: theme.dot-circle-size;
                            background: theme.dot-color;
                            border-radius: UAppTheme.radius-circle;
                            animate opacity { duration: 200ms; }
                        }
                    }
                }

                states [
                    focused-hover-selected when root.has-focus && root.selected-value == root.option && root.has-hover: {
                        border-color: UAppTheme.focus-color;
                        border-width: UAppTheme.focus-border-width;
                        background: theme.background-selected-hover;
                    }
                    focused-selected when root.has-focus && root.selected-value == root.option: {
                        border-color: UAppTheme.focus-color;
                        border-width: UAppTheme.focus-border-width;
                        background: theme.background-selected;
                    }
                    focused when root.has-focus: {
                        border-color: UAppTheme.focus-color;
                        border-width: UAppTheme.focus-border-width;
                    }
                    hover-unselected when root.has-hover && root.selected-value != root.option: {
                        border-color: theme.border-hover;
                    }
                    hover-selected when root.has-hover && root.selected-value == root.option: {
                        border-color: theme.border-selected-hover;
                        background: theme.background-selected-hover;
                    }
                    selected when root.selected-value == root.option: {
                        border-color: theme.border-selected;
                        background: theme.background-selected;
                    }
                ]
            }
        }

        VerticalLayout {
            alignment: center;
            UText {
                text: root.option;
                color: theme.text-color;
                font-size: theme.font-size;
                font-weight: theme.font-weight;
                states [
                    selected when root.selected-value == root.option: {
                        color: theme.text-color-selected;
                        font-weight: theme.font-weight-selected;
                    }
                ]
            }
        }
    }
}

export component UVerticalRadio inherits Rectangle {
    accessible-role: groupbox;
    accessible-item-count: self.options.length;
    in-out property <URadioTheme> theme: URadioThemes.default;
    in-out property <[string]> options;
    in-out property <string> selected-value;
    callback selected(value: string);
    VerticalLayout {
        alignment: start;
        spacing: theme.radio-spacing;
        for option in root.options: URadioOption {
            option: option;
            theme: theme;
            selected-value <=> root.selected-value;
            selected(value) => {
                root.selected(value);
            }
        }
    }
}

export component UHorizontalRadio inherits Rectangle {
    accessible-role: groupbox;
    accessible-item-count: self.options.length;
    in-out property <URadioTheme> theme: URadioThemes.default;
    in-out property <[string]> options;
    in-out property <string> selected-value;
    callback selected(value: string);
    HorizontalLayout {
        alignment: start;
        spacing: theme.radio-spacing;
        for option in root.options: URadioOption {
            option: option;
            theme: theme;
            selected-value <=> root.selected-value;
            selected(value) => {
                root.selected(value);
            }
        }
    }
}
