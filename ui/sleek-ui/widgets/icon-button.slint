import { UAppTheme } from "../app-theme.slint";

import { UIconButtonTheme, UIconButtonThemes, UIconButtonThemeColors } from "../widget-themes/icon-button.slint";
import { ButtonInterface } from "../utils/button-interface.slint";

import { UIcon } from "icon.slint";
import { USpinner } from "spinner.slint";



export component UIconButton inherits ButtonInterface {
	// Accessability properties
	accessible-role: button;
    accessible-action-default => {
        self.clicked()
    }
	// Regular properties
    in-out property <UIconButtonTheme> theme: UIconButtonThemes.default;
    property <UIconButtonThemeColors> theme-colors: danger ? theme.danger-colors : theme.base-colors;
    in-out property <bool> danger: false;
    in-out property <bool> loading: false;
    in-out property <bool> checked: false;
    in-out property <image> icon;
    in-out property <length> icon-size: theme.icon-size;
    enabled: !loading;
    background: theme-colors.background;
    border-radius: theme.border-radius;
    border-width: self.has-focus ? UAppTheme.focus-border-width : theme.border-width;
    border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border;
    HorizontalLayout {
        alignment: center;
        padding-top: theme.padding-vertical;
        padding-bottom: theme.padding-vertical;
        padding-left: theme.padding-horizontal;
        padding-right: theme.padding-horizontal;
        VerticalLayout {
            alignment: center;
            if !loading: UIcon {
                size: icon-size;
                source: icon;
                colorize: theme-colors.text-color;
                animate colorize { duration: 200ms; }

                states [
                    disabled when !root.enabled: {
                        colorize: theme-colors.text-color-disabled;
                    }
                    checked when root.checked: {
                        colorize: theme-colors.text-color-checked;
                    }
                    active when root.pressed: {
                        colorize: theme-colors.text-color-active;
                    }
                    hover when root.has-hover: {
                        colorize: theme-colors.text-color-hover;
                    }
                ]
            }
            if loading: USpinner {
                size: icon-size;
                colorize: theme-colors.text-color;
            }
        }
    }

    states [
        loading when self.loading: {
            background: theme-colors.background;
        }
        disabled when !self.enabled: {
            background: theme-colors.background-disabled;
            border-color: theme-colors.border-disabled;
        }
        active when self.pressed: {
            background: theme-colors.background-active;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-active;
        }
        hover when self.has-hover: {
            background: theme-colors.background-hover;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-hover;
        }
        checked when self.checked: {
            background: theme-colors.background-checked;
            border-color: self.has-focus ? UAppTheme.focus-color : theme-colors.border-checked;
        }
    ]
}
