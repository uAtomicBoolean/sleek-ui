import { UAppTheme } from "../app-theme.slint";

import { ButtonInterface } from "../utils/button-interface.slint";

import { UIcon } from "icon.slint";
import { USpinner } from "spinner.slint";


export struct UIconButtonThemeColor {
	base: brush,
	danger: brush,
}


export enum UIconButtonVariant {
	primary,
	default,
	filled,
	text,
	text-stripped,
	custom,
}


export component UIconButton inherits ButtonInterface {
	// Accessability properties
	accessible-role: button;
    accessible-action-default => {
        self.clicked()
    }
	// Theming properties
	// Using a custom size to have the same height as the Button.
	// When using 16px as the icon's size, there will be a difference
	// of 1px between the height of the IconButton and the Button.
	// This is due to the text in the Button that increases the height 
	// to 27px (26px for an icon button).
	// This is a weird thing because the font-size is of 14px in the Button,
	// which is smaller than the 16px of the icons.
    in-out property <length> t-icon-size: 17px * UAppTheme.scale-factor;
    in-out property <length> t-border-width;
    in-out property <length> t-border-radius: UAppTheme.radius-circle;
    in-out property <length> t-padding-vertical: UAppTheme.padding-vertical;
    in-out property <length> t-padding-horizontal: UAppTheme.padding-vertical;
    in-out property <UIconButtonThemeColor> t-background;
    in-out property <UIconButtonThemeColor> t-background-hover;
    in-out property <UIconButtonThemeColor> t-background-active;
    in-out property <UIconButtonThemeColor> t-background-checked;
    in-out property <UIconButtonThemeColor> t-background-disabled;
    in-out property <UIconButtonThemeColor> t-text-color;
    in-out property <UIconButtonThemeColor> t-text-color-hover;
    in-out property <UIconButtonThemeColor> t-text-color-active;
    in-out property <UIconButtonThemeColor> t-text-color-checked;
    in-out property <UIconButtonThemeColor> t-text-color-disabled;
    in-out property <UIconButtonThemeColor> t-border;
    in-out property <UIconButtonThemeColor> t-border-hover;
    in-out property <UIconButtonThemeColor> t-border-active;
    in-out property <UIconButtonThemeColor> t-border-checked;
    in-out property <UIconButtonThemeColor> t-border-disabled;
	
	// Regular properties
    in-out property <UIconButtonVariant> variant: default;
    in-out property <bool> danger: false;
    in-out property <bool> loading: false;
    in-out property <bool> checked: false;
    in-out property <image> icon;
    in-out property <bool> colorize-icon: true;
    enabled: !loading;
    background: get-background();
    border-radius: self.t-border-radius;
    border-width: self.has-focus ? UAppTheme.focus-border-width : self.t-border-width;
    border-color: self.has-focus ? UAppTheme.focus-color : get-border-color();
    HorizontalLayout {
        alignment: center;
        padding-top: t-padding-vertical;
        padding-bottom: t-padding-vertical;
        padding-left: t-padding-horizontal;
        padding-right: t-padding-horizontal;
        VerticalLayout {
            alignment: center;
            if !loading: UIcon {
                size: t-icon-size;
                source: icon;
                colorize: colorize-icon ? get-color(t-text-color) : transparent;
                animate colorize { duration: 200ms; }
                states [
                    disabled when !root.enabled: {
                        colorize: colorize-icon ? get-color(t-text-color-disabled) : transparent;
                    }
                    checked when root.checked: {
                        colorize: colorize-icon ? get-color(t-text-color-checked) : transparent;
                    }
                    active when root.pressed: {
                        colorize: colorize-icon ? get-color(t-text-color-active) : transparent;
                    }
                    hover when root.has-hover: {
                        colorize: colorize-icon ? get-color(t-text-color-hover) : transparent;
                    }
                ]
            }
            if loading: USpinner {
                size: t-icon-size;
                colorize: get-color(t-text-color);
            }
        }
    }

    function get-color(c: UIconButtonThemeColor) -> brush {
        return self.danger ? c.danger : c.base;
    }

	// Managing the background and border colors with a function allows use to 
	// not use a states list for both properties.
	// Thanks to this, we can use a states list for the variants which remove
	// a bug in which the colors are not updated when switching color schemes 
	// while using an 'init' to instantiate the variants.
    function get-background() -> brush {
        if !self.enabled {
            return get-color(t-background-disabled);
        }
        if self.pressed {
            return get-color(t-background-active);
        }
        if self.has-hover {
            return get-color(t-background-hover);
        }
        if self.checked {
            return get-color(t-background-checked);
        }
        return get-color(t-background);
    }
    function get-border-color() -> brush {
        if !self.enabled {
            return get-color(t-border-disabled);
        }
        if self.pressed {
            return get-color(t-border-active);
        }
        if self.has-hover {
            return get-color(t-border-hover);
        }
        if self.checked {
            return get-color(t-border-checked);
        }
        return get-color(t-border);
    }

	// Instantiating the variants' themes.
	states [
        primary when variant == UIconButtonVariant.primary: {
            t-border-width: UAppTheme.border-width-base;
            t-background: { base: UAppTheme.primary, danger: UAppTheme.danger };
            t-background-hover: { base: UAppTheme.primary-hover, danger: UAppTheme.danger-hover };
            t-background-active: { base: UAppTheme.primary-active, danger: UAppTheme.danger-active };
            t-background-checked: { base: UAppTheme.primary, danger: UAppTheme.danger };
            t-background-disabled: { base: UAppTheme.border-secondary, danger: UAppTheme.border-secondary };
            t-text-color: { base: Colors.white, danger: Colors.white };
            t-text-color-hover: { base: Colors.white, danger: Colors.white };
            t-text-color-active: { base: Colors.white, danger: Colors.white };
            t-text-color-checked: { base: Colors.white, danger: Colors.white };
            t-text-color-disabled: { base: UAppTheme.text-disabled, danger: UAppTheme.text-disabled };
        }
        default when variant == UIconButtonVariant.default: {
            t-border-width: UAppTheme.border-width-base;
            t-background-hover: { base: UAppTheme.color-fill-tertiary, danger: Colors.transparent };
            t-background-active: { base: UAppTheme.color-fill-secondary, danger: UAppTheme.danger-selected };
            t-background-checked: { base: UAppTheme.primary-selected, danger: UAppTheme.danger-selected };
            t-text-color: { base: UAppTheme.text, danger: UAppTheme.danger };
            t-text-color-hover: { base: UAppTheme.text, danger: UAppTheme.danger-hover };
            t-text-color-active: { base: UAppTheme.text, danger: UAppTheme.danger-active };
            t-text-color-checked: { base: UAppTheme.primary, danger: UAppTheme.danger };
            t-text-color-disabled: { base: UAppTheme.text-disabled, danger: UAppTheme.text-disabled };
            t-border: { base: UAppTheme.border, danger: UAppTheme.danger };
            t-border-hover: { base: UAppTheme.border, danger: UAppTheme.danger-hover };
            t-border-active: { base: UAppTheme.border, danger: UAppTheme.danger-active };
            t-border-checked: { base: UAppTheme.primary, danger: UAppTheme.danger };
            t-border-disabled: { base: UAppTheme.border, danger: UAppTheme.border };
        }
        filled when variant == UIconButtonVariant.filled: {
            t-background: { base: UAppTheme.color-fill-tertiary, danger: UAppTheme.danger.with-alpha(0.1) };
            t-background-hover: {
                base: UAppTheme.color-fill-secondary,
                danger: UAppTheme.danger-hover.with-alpha(0.3)
            };
            t-background-active: { base: UAppTheme.color-fill, danger: UAppTheme.danger-active.with-alpha(0.4) };
            t-background-checked: { base: UAppTheme.primary-selected, danger: UAppTheme.danger-selected };
            t-text-color: { base: UAppTheme.text, danger: UAppTheme.danger };
            t-text-color-hover: { base: UAppTheme.text, danger: UAppTheme.danger-hover };
            t-text-color-active: { base: UAppTheme.text, danger: UAppTheme.danger-active };
            t-text-color-checked: { base: UAppTheme.primary, danger: UAppTheme.danger };
            t-text-color-disabled: { base: UAppTheme.text-disabled, danger: UAppTheme.text-disabled };
        }
        text when variant == UIconButtonVariant.text: {
            t-background-hover: {
                base: UAppTheme.color-fill-secondary,
                danger: UAppTheme.danger-hover.with-alpha(0.1)
            };
            t-background-active: { base: UAppTheme.color-fill, danger: UAppTheme.danger-active.with-alpha(0.3) };
            t-text-color: { base: UAppTheme.text, danger: UAppTheme.danger };
            t-text-color-hover: { base: UAppTheme.text, danger: UAppTheme.danger-hover };
            t-text-color-active: { base: UAppTheme.text, danger: UAppTheme.danger-active };
            t-text-color-checked: { base: UAppTheme.primary, danger: UAppTheme.danger };
            t-text-color-disabled: { base: UAppTheme.text-disabled, danger: UAppTheme.text-disabled };
        }
        stripped when variant == UIconButtonVariant.text-stripped: {
            t-text-color: { base: UAppTheme.text-secondary, danger: UAppTheme.text-secondary };
            t-text-color-hover: { base: UAppTheme.text, danger: UAppTheme.text };
            t-text-color-active: { base: UAppTheme.text, danger: UAppTheme.text };
            t-text-color-disabled: { base: UAppTheme.text-disabled, danger: UAppTheme.text-disabled };
        }
    ]
}
