import { UAppTheme } from "../../app-theme.slint";

import { UIconButtonThemeColor, UIconButtonTheme, UIconButtonThemes } from "theme.slint";

import { ButtonInterface } from "../button-interface.slint";

import { UIcon } from "../icon.slint";
import { USpinner } from "../spinner.slint";


export enum UIconButtonVariant {
	primary,
	default,
	filled,
	text,
	text-stripped,
}


export component UIconButton inherits ButtonInterface {
	// Accessability properties
	accessible-role: button;
    accessible-action-default => {
        self.clicked()
    }	
	// Regular properties
    in-out property <UIconButtonVariant> variant: default;
    property <UIconButtonTheme> theme: {
        if variant == UIconButtonVariant.primary {
            return UIconButtonThemes.primary;
        }
        if variant == UIconButtonVariant.filled {
            return UIconButtonThemes.filled;
        }
        if variant == UIconButtonVariant.text {
            return UIconButtonThemes.text;
        }
        if variant == UIconButtonVariant.text-stripped {
            return UIconButtonThemes.text-stripped;
        }
        return UIconButtonThemes.default;
    }
    in-out property <bool> danger: false;
    in-out property <bool> loading: false;
    in-out property <bool> checked: false;
    in-out property <image> icon;
    in-out property <bool> colorize-icon: true;
	// Using a custom size to have the same height as the Button.
	// When using 16px as the icon's size, there will be a difference
	// of 1px between the height of the IconButton and the Button.
	// This is due to the text in the Button that increases the height 
	// to 27px (26px for an icon button).
	// This is a weird thing because the font-size is of 14px in the Button,
	// which is smaller than the 16px of the icons.
	property <length> icon-size: 17px * UAppTheme.scale-factor;
    changed enabled => {
        if root.loading && root.enabled {
            root.enabled = false;
        }
    }
    changed loading => {
        root.enabled = !root.loading;
    }
    init => {
        if root.loading {
            root.enabled = false;
        }
    }
    background: get-color(theme.bg);
    border-radius: UAppTheme.radius-circle;
    border-width: self.has-focus ? UAppTheme.focus-border-width : theme.border-width;
    border-color: self.has-focus ? UAppTheme.focus-color : get-color(theme.border);
    HorizontalLayout {
        alignment: center;
        padding-top: UAppTheme.padding-vertical;
        padding-bottom: UAppTheme.padding-vertical;
        padding-left: UAppTheme.padding-vertical;
        padding-right: UAppTheme.padding-vertical;
        VerticalLayout {
            alignment: center;
            if !loading: UIcon {
                size: icon-size;
                source: icon;
                colorize: colorize-icon ? get-color(theme.text) : transparent;
                animate colorize { duration: 200ms; }
                states [
                    loading when root.loading: {
                        colorize: transparent;
                    }
                    disabled when !root.enabled: {
                        colorize: colorize-icon ? get-color(theme.text-disabled) : transparent;
                    }
                    checked when root.checked: {
                        colorize: colorize-icon ? get-color(theme.text-checked) : transparent;
                    }
                    active when root.pressed: {
                        colorize: colorize-icon ? get-color(theme.text-active) : transparent;
                    }
                    hover when root.has-hover: {
                        colorize: colorize-icon ? get-color(theme.text-hover) : transparent;
                    }
                ]
            }
            if loading: USpinner {
                size: icon-size;
                colorize: get-color(theme.text);
            }
        }
    }

    function get-color(c: UIconButtonThemeColor) -> brush {
        return self.danger ? c.danger : c.base;
    }
    states [
        loading when root.loading: {
            background: get-color(theme.bg);
            border-color: get-color(theme.border);
        }
        disabled when !root.enabled: {
            background: get-color(theme.bg-disabled);
            border-color: get-color(theme.border-disabled);
        }
        checked when root.checked: {
            background: get-color(theme.bg-checked);
            border-color: get-color(theme.border-checked);
        }
        active when root.pressed && !root.loading: {
            background: get-color(theme.bg-active);
            border-color: get-color(theme.border-active);
        }
        hover when root.has-hover && !root.loading: {
            background: get-color(theme.bg-hover);
            border-color: get-color(theme.border-hover);
        }
    ]
}
