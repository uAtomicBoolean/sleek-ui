import { UAppTheme } from "../app-theme.slint";

import { ButtonInterface } from "button-interface.slint";

import { UPopover } from "popover.slint";
import { UText } from "text.slint";
import { UIcon } from "icon.slint";

import { ScrollView } from "std-widgets.slint";


struct USelectOption {
	text: string,
	value: string,
	enabled: bool,
}


export component USelect inherits ButtonInterface {
	// Accessability properties
	accessible-role: combobox;
    accessible-expandable: true;
    accessible-value: self.selected-text;
    accessible-item-count: self.options.length;
    accessible-action-default => {
        self.clicked();
    }
	// Regular properties
    in-out property <int> current-index: -1;
    in-out property <[USelectOption]> options;
    private property <string> selected-text;
    private property <length> full-options-height: (29px * UAppTheme.scale-factor) * options.length + UAppTheme.padding-base * 2;
    callback selected-changed(new-index: int);
    background: UAppTheme.bg-elevated;
    border-width: self.has-focus ? UAppTheme.focus-border-width : UAppTheme.border-width-base;
    border-color: self.has-focus ? UAppTheme.focus-color : UAppTheme.border;
    border-radius: UAppTheme.radius-base;
    clicked => {
        popup.show();
    }
    HorizontalLayout {
        alignment: space-between;
        spacing: UAppTheme.spacing-base;
        padding-top: UAppTheme.padding-vertical;
        padding-bottom: UAppTheme.padding-vertical;
        padding-left: UAppTheme.padding-horizontal;
        padding-right: UAppTheme.padding-horizontal / 2;
        VerticalLayout {
            alignment: center;
            text-obj := UText {
                text: current-index != -1 ? options[current-index].text : "";
                overflow: elide;
                font-size: UAppTheme.font-size-base;
            }
        }

        VerticalLayout {
            alignment: center;
            UIcon {
                source: @image-url("../assets/icons/chevron-up-down.svg");
                size: UAppTheme.icon-size-base;
                colorize: UAppTheme.border;
            }
        }
    }

    popup := UPopover {
        property <length> popup-max-height: 124px * UAppTheme.scale-factor;
        close-policy: close-on-click-outside;
        width: root.width;
        height: root.full-options-height > popup-max-height ? popup-max-height : root.full-options-height;
        y: root.y + root.height + 1px;
        ScrollView {
            height: parent.height;
            list-contents := VerticalLayout {
                padding: UAppTheme.padding-base;
                for option[index] in root.options: select-item := Rectangle {
					// List item accessability
					accessible-role: list-item;
                    accessible-item-selectable: true;
                    accessible-item-selected: options[current-index].value == option.value;
                    accessible-value: option.text;
                    accessible-action-default => {
                        touch.clicked();
                    }
					// Item contents and properties.
					height: 29px * UAppTheme.scale-factor;
                    border-radius: UAppTheme.radius-base;
                    width: 100%;
                    VerticalLayout {
                        alignment: center;
                        padding-left: UAppTheme.padding-horizontal;
                        padding-right: UAppTheme.padding-horizontal;
                        UText {
                            text: option.text;
                            font-size: UAppTheme.font-size-base;
                            overflow: elide;
                            wrap: no-wrap;
                            states [
                                disabled when !option.enabled: {
                                    color: UAppTheme.text-disabled;
                                }
                                selected when options[current-index].value == option.value: {
                                    color: UAppTheme.primary.base;
                                }
                            ]
                        }
                    }

                    touch := TouchArea {
                        enabled: option.enabled;
                        mouse-cursor: pointer;
                        clicked => {
                            current-index = index;
                            selected-changed(index);
                            popup.close();
                        }
                    }

                    animate background { duration: 200ms; }
                    states [
                        selected when options[current-index].value == option.value && option.enabled: {
                            background: UAppTheme.primary.selected;
                        }
                        hover when touch.has-hover && option.enabled: {
                            background: UAppTheme.color-fill-tertiary;
                        }
                    ]
                }
            }
        }
    }

    states [
        disabled when !self.enabled: {
            border-color: UAppTheme.border-secondary;
            text-obj.color: UAppTheme.text-disabled;
        }
        hover when self.has-hover: {
            border-color: self.has-focus ? black : UAppTheme.primary.hover;
        }
    ]
}
