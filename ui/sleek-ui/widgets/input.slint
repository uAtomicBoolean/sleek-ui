import { UInputTheme, UInputThemes } from "../widget-themes/input.slint";
import { UIcon } from "icon.slint";
import { UText } from "text.slint";


export component UInput inherits Rectangle {
	// Accessability properties
	accessible-role: text-input;
    accessible-read-only: input.read-only;
    accessible-value: self.text;
    accessible-placeholder-text: self.placeholder;
    accessible-action-default => {
        self.accepted()
    }
    accessible-action-set-value(value) => {
        input.text = value;
    }
	// Regular properties
    in-out property <UInputTheme> theme: UInputThemes.default;
    in-out property <string> text <=> input.text;
    in-out property <bool> enabled <=> input.enabled;
    in-out property <InputType> input-type: InputType.text;
    in-out property <string> placeholder: "";
    in-out property <bool> clearable: false;
    in-out property <bool> error: false;
    in-out property <bool> show: false;
    border-width: theme.border-width;
    border-radius: theme.border-radius;
    border-color: theme.border-color;
    background: theme.background;
    clip: true;
    HorizontalLayout {
        width: root.width;
        HorizontalLayout {
            padding-left: theme.padding-horizontal;
            padding-right: theme.padding-horizontal;
            Rectangle {
                height: theme.font-size + theme.padding-vertical * 3;
                clip: true;
                input := TextInput {
                    property <length> h-padding: theme.padding-horizontal * 2;
                    property <length> computed_x;
                    width: max(parent.width, self.preferred-width);
                    x: min(computed_x, 0px);
                    input-type: show ? InputType.text : input-type;
                    read-only: !root.enabled;
                    font-size: theme.font-size;
                    font-weight: theme.font-weight;
                    color: theme.text-color;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                    single-line: true;
                    wrap: no-wrap;
					// Shamelessly taken from Surrealisme UI
					// Source : https://github.com/Surrealism-All/SurrealismUI/blob/main/src/input/input.slint
					cursor-position-changed(cpos) => {
                        if cpos.x + self.computed_x < self.h-padding {
                            self.computed_x = - cpos.x + self.h-padding;
                        } else if cpos.x + self.computed_x > parent.width - 1px {
                            self.computed_x = parent.width - cpos.x - 1px;
                        }
                    }
                    if self.text == "" && placeholder != "": HorizontalLayout {
                        alignment: start;
                        VerticalLayout {
                            alignment: center;
                            UText {
                                text: placeholder;
                                color: theme.placeholder-color;
                                font-size: theme.font-size;
                                font-weight: theme.font-weight;
                            }
                        }
                    }
                }
            }
        }

        if clearable && input-type != InputType.password: VerticalLayout {
            alignment: center;
            padding-left: -theme.padding-horizontal;
            Rectangle {
                height: 100%;
                width: theme.icon-size + theme.padding-horizontal;
                UIcon {
                    size: theme.icon-size;
                    colorize: theme.icon-color;
                    source: @image-url("../assets/icons/circle-x.svg");
                }

                TouchArea {
                    accessible-role: button;
                    accessible-label: @tr("Clear input.");
                    mouse-cursor: MouseCursor.pointer;
                    clicked => {
                        text = "";
                        input.set-selection-offsets(0, 0);
                    }
                }
            }
        }
        if input-type == InputType.password: VerticalLayout {
            alignment: center;
            padding-left: -theme.padding-horizontal;
            Rectangle {
                height: 100%;
                width: theme.icon-size + theme.padding-horizontal;
                UIcon {
                    size: theme.icon-size;
                    colorize: theme.icon-color;
                    source: show ? @image-url("../assets/icons/eye.svg") : @image-url("../assets/icons/eye-closed.svg");
                }

                TouchArea {
                    accessible-role: button;
                    accessible-label: @tr("Show password input content.");
                    mouse-cursor: MouseCursor.pointer;
                    clicked => {
                        show = !show;
                        if show {
                            input.input-type = InputType.text;
                        } else {
                            input.input-type = InputType.password;
                        }
                    }
                }
            }
        }
    }

    states [
        disabled when !input.enabled: {
            background: theme.background-disabled;
            border-color: theme.border-color-disabled;
            input.color: theme.text-color-disabled;
        }
        error when error: {
            background: theme.background-error;
            border-color: theme.border-color-error;
        }
        active when input.has-focus: {
            background: theme.background-active;
            border-color: theme.border-color-active;
        }
    ]

	// Link the functions and callback of TextInput to child.
	public function set-selection-offsets(start: int, end: int) {
        input.set-selection-offsets(start, end);
    }
    public function select-all() {
        input.select-all();
    }
    public function clear-selection() {
        input.clear-selection();
    }
    public function copy() {
        input.copy();
    }
    public function cut() {
        input.cut();
    }
    public function paste() {
        input.paste();
    }
    callback accepted <=> input.accepted;
    callback cursor-position-changed <=> input.cursor-position-changed;
    callback edited <=> input.edited;
    callback key-pressed <=> input.key-pressed;
    callback key-released <=> input.key-released;
}
