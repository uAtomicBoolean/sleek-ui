import { UAppTheme } from "../app-theme.slint";

import { UIcon } from "icon.slint";
import { UText } from "text.slint";
import { IconTextPlacement } from "../utils/structs.slint";


export enum UTagVariant {
	info,
	success,
	warning,
	danger,
}

export component UTag inherits Rectangle {
	// Accessability properties
	accessible-role: AccessibleRole.text;
    accessible-label: self.text;
	// Theming properties
	in-out property <brush> t-background;
    in-out property <length> t-text-size: UAppTheme.font-size-small;
    in-out property <brush> t-text-color;
    in-out property <length> t-icon-size: UAppTheme.font-size-base;
    in-out property <length> t-border-width;
    in-out property <brush> t-border-color;
    in-out property <length> t-border-radius: UAppTheme.radius-base;
    in-out property <length> t-padding-vertical: UAppTheme.padding-vertical / 1.5;
    in-out property <length> t-padding-horizontal: UAppTheme.padding-horizontal / 1.5;
    in-out property <length> t-content-spacing: UAppTheme.spacing-small;
	// Regular properties
    in-out property <UTagVariant> variant: info;
    in-out property <color> text-color: t-text-color;
    in-out property <color> background-color: t-background;
    in-out property <string> text <=> badge-text.text;
    in-out property <image> icon;
    in-out property <IconTextPlacement> icon-placement: hidden;
    background: background-color;
    border-width: t-border-width;
    border-radius: t-border-radius;
    border-color: t-border-color;
    HorizontalLayout {
        spacing: t-content-spacing;
        padding-top: t-padding-vertical;
        padding-bottom: t-padding-vertical;
        padding-left: t-padding-horizontal;
        padding-right: t-padding-horizontal;
        if icon-placement == IconTextPlacement.start: UIcon {
            source: icon;
            size: t-icon-size;
            colorize: t-text-color;
        }
        badge-text := UText {
            font-size: t-text-size;
            color: text-color;
        }

        if icon-placement == IconTextPlacement.end: UIcon {
            source: icon;
            size: t-icon-size;
            colorize: t-text-color;
        }
    }

    init => {
        if variant == UTagVariant.info {
            self.t-background = UAppTheme.primary-selected;
            self.t-text-color = UAppTheme.primary;
        } else if variant == UTagVariant.success {
            self.t-background = UAppTheme.success-selected;
            self.t-text-color = UAppTheme.success;
        } else if variant == UTagVariant.warning {
            self.t-background = UAppTheme.warning-selected;
            self.t-text-color = UAppTheme.warning;
        } else if variant == UTagVariant.danger {
            self.t-background = UAppTheme.danger-selected;
            self.t-text-color = UAppTheme.danger;
        }
    }
}
