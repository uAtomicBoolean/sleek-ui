import { UAppTheme } from "../app-theme.slint";
import { UCenter } from "../layouts/center.slint";
import { UText } from "text.slint";
import { UDivider } from "divider.slint";
import { ButtonInterface } from "../utils/button-interface.slint";


export component UTabs inherits Rectangle {
	// Theming properties
	in-out property <length> t-font-size: UAppTheme.font-size-base;
    in-out property <brush> t-text-color: UAppTheme.text;
    in-out property <brush> t-text-color-hover: UAppTheme.primary-hover;
    in-out property <brush> t-text-color-selected: UAppTheme.primary;
    in-out property <brush> t-underline-color: UAppTheme.primary;
    in-out property <length> t-spacing-content: UAppTheme.spacing-bigger;
    in-out property <length> t-divider-top-padding: UAppTheme.padding-base;
    in-out property <length> t-vertical-padding: UAppTheme.padding-vertical;
    in-out property <length> t-horizontal-padding: UAppTheme.padding-horizontal;
	// Regular properties
    in-out property <[string]> tabs;
    in-out property <int> current-index: 0;
    property <length> current-text-x: t-horizontal-padding;
    property <length> current-text-width: 0px;
    VerticalLayout {
        alignment: start;
        HorizontalLayout {
            alignment: start;
            padding-bottom: t-divider-top-padding;
            for tab[idx] in tabs: ButtonInterface {
                clicked => {
                    current-index = idx;
                    current-text-x = self.x + t-horizontal-padding;
                    current-text-width = tab-text.width;
                }
                border-color: UAppTheme.focus-color;
                border-width: self.has-focus ? UAppTheme.focus-border-width : 0px;
                border-radius: UAppTheme.radius-base;
                VerticalLayout {
                    HorizontalLayout {
                        padding-top: t-vertical-padding;
                        padding-bottom: t-vertical-padding;
                        padding-left: t-horizontal-padding;
                        padding-right: t-horizontal-padding;
                        tab-text := UText {
                            text: tab;
                            font-size: t-font-size;
                            color: current-index == idx ? t-text-color-selected : t-text-color;
                            animate color { duration: 200ms; }
                        }
                    }
                }

				// Used to initialize the current-* properties.
				// This is due to a recursion error when trying to get the tab-text's 
				// width before it being rendered.
                Timer {
                    interval: 1ms;
                    running: true;
                    triggered => {
                        current-text-width = tab-text.width;
                        self.running = false;
                    }
                }

                states [
                    pressed when self.pressed: {
                        tab-text.color: t-text-color-selected;
                    }
                    hover when self.has-hover: {
                        tab-text.color: t-text-color-hover;
                    }
                ]
            }
        }

        Rectangle {
            UDivider { }

            Rectangle {
                width: current-text-width;
                height: 2px * UAppTheme.scale-factor;
                x: current-text-x;
                background: t-underline-color;
                animate x, width { duration: 200ms; }
            }
        }

        VerticalLayout {
            padding-top: t-spacing-content;
            @children
        }
    }
}
