import { UAppTheme } from "../app-theme.slint";
import { UCenter } from "../layouts/center.slint";
import { UText } from "text.slint";
import { UDivider } from "divider.slint";
import { ButtonInterface } from "button-interface.slint";


export component UTabs inherits Rectangle {
	// Regular properties
    in-out property <[string]> tabs;
    in-out property <int> current-index: 0;
    property <length> current-text-x: UAppTheme.padding-horizontal;
    property <length> current-text-width: 0px;
    VerticalLayout {
        alignment: start;
        HorizontalLayout {
            alignment: start;
            padding-bottom: UAppTheme.padding-base;
            for tab[idx] in tabs: ButtonInterface {
                clicked => {
                    current-index = idx;
                    current-text-x = self.x + UAppTheme.padding-horizontal;
                    current-text-width = tab-text.width;
                }
                border-color: UAppTheme.focus-color;
                border-width: self.has-focus ? UAppTheme.focus-border-width : 0px;
                border-radius: UAppTheme.radius-base;
                VerticalLayout {
                    HorizontalLayout {
                        padding-top: UAppTheme.padding-vertical;
                        padding-bottom: UAppTheme.padding-vertical;
                        padding-left: UAppTheme.padding-horizontal;
                        padding-right: UAppTheme.padding-horizontal;
                        tab-text := UText {
                            text: tab;
                            font-size: UAppTheme.font-size-base;
                            color: current-index == idx ? UAppTheme.primary.base : UAppTheme.text;
                            animate color { duration: 200ms; }
                        }
                    }
                }

				// Used to initialize the current-* properties.
				// This is due to a recursion error when trying to get the tab-text's 
				// width before it being rendered.
                Timer {
                    interval: 1ms;
                    running: true;
                    triggered => {
                        current-text-width = tab-text.width;
                        self.running = false;
                    }
                }

                states [
                    pressed when self.pressed: {
                        tab-text.color: UAppTheme.primary.base;
                    }
                    hover when self.has-hover: {
                        tab-text.color: UAppTheme.primary.hover;
                    }
                ]
            }
        }

        Rectangle {
            UDivider { }

            Rectangle {
                width: current-text-width;
                height: 2px * UAppTheme.scale-factor;
                x: current-text-x;
                background: UAppTheme.primary.base;
                animate x, width { duration: 200ms; }
            }
        }

        VerticalLayout {
            padding-top: UAppTheme.spacing-bigger;
            @children
        }
    }
}
