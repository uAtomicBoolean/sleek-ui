import { UAppTheme } from "../app-theme.slint";
import { ButtonInterface } from "button-interface.slint";

import { UIcon } from "icon.slint";
import { UText } from "text.slint";
import { UIconButton, UIconButtonVariant } from "icon-button/icon-button.slint";


export enum UNotificationVariant {
	info,
	success,
	warning,
	danger,
}

export component UNotification inherits ButtonInterface {
	// Regular properties
	in-out property <UNotificationVariant> variant: info;
    in-out property <string> title;
    in-out property <string> message;
    in-out property <bool> single-line-message: true;
	in-out property <image> notif-icon: {
		if variant == UNotificationVariant.success {
			return @image-url("../assets/icons/circle-check.svg");
		}
		if variant == UNotificationVariant.warning {
			return @image-url("../assets/icons/info.svg");
		}
		if variant == UNotificationVariant.danger {
			return @image-url("../assets/icons/circle-x.svg");
		}
		return @image-url("../assets/icons/info.svg");
	}
	in-out property <brush> notif-icon-color: {
		if variant == UNotificationVariant.success {
			return UAppTheme.success.base;
		}
		if variant == UNotificationVariant.warning {
			return UAppTheme.warning.base;
		}
		if variant == UNotificationVariant.danger {
			return UAppTheme.danger.base;
		}
		return UAppTheme.primary.base;
	}
    callback close <=> close-button.clicked;
    min-width: 300px * UAppTheme.scale-factor;
    background: UAppTheme.bg-elevated;
    border-radius: clamp(UAppTheme.radius-base, 0, UAppTheme.radius-medium);
    border-width: root.has-focus ? UAppTheme.focus-border-width : 0;
    border-color: root.has-focus ? UAppTheme.focus-color : transparent;
    drop-shadow-blur: UAppTheme.shadow-blur;
    drop-shadow-color: UAppTheme.shadow-color;
    drop-shadow-offset-y: UAppTheme.shadow-y-offset;
    VerticalLayout {
        padding: UAppTheme.padding-base;
        HorizontalLayout {
            padding-top: UAppTheme.padding-medium;
            padding-bottom: UAppTheme.padding-medium;
            padding-left: UAppTheme.padding-big;
            padding-right: UAppTheme.padding-big;
            VerticalLayout {
                alignment: center;
                padding-right: UAppTheme.padding-medium;
                UIcon {
					source: notif-icon;
					colorize: notif-icon-color;
                    size: UAppTheme.font-size-big;
                    accessible-role: none;
                }
            }

            VerticalLayout {
                alignment: center;
                horizontal-stretch: 1;
                padding-top: -2px; // Offset text to have it correctly centered.
				UText {
                    text: title;
                    wrap: no-wrap;
                    overflow: elide;
                    font-size: UAppTheme.font-size-medium;
                    animate color { duration: 200ms; }
                }
            }

            VerticalLayout {
                alignment: center;
                close-button := UIconButton {
                    variant: text;
                    icon: @image-url("../assets/icons/x.svg");
                    accessible-label: @tr("Close button for notification");
                    accessible-action-default => {
                        self.clicked();
                    }
                }
            }
        }

        if message != "": HorizontalLayout {
            padding-bottom: UAppTheme.padding-medium;
            padding-left: UAppTheme.font-size-big + UAppTheme.font-size-medium + UAppTheme.padding-base;
            padding-right: UAppTheme.padding-big;
            alignment: start;
            UText {
                overflow: root.single-line-message ? elide : clip;
                wrap: root.single-line-message ? no-wrap : word-wrap;
                text: root.message;
                accessible-label: @tr("Notification content");
            }
        }
    }
}
