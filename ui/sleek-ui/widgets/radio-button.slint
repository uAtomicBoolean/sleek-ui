import { UAppTheme } from "../app-theme.slint";
import { ButtonInterface } from "../utils/button-interface.slint";
import { UText } from "./text.slint";


export enum URadioButtonVariant {
	default,
	primary,
	custom,
}

export component URadioButton {
	// Theming properties
	in-out property <brush> t-background;
    in-out property <brush> t-background-hover;
    in-out property <brush> t-background-selected;
    in-out property <brush> t-background-selected-hover;
    in-out property <brush> t-background-selected-active;
    in-out property <length> t-border-width: UAppTheme.border-width-base;
    in-out property <length> t-border-radius: UAppTheme.radius-base;
    in-out property <brush> t-border-color;
    in-out property <brush> t-border-color-hover;
    in-out property <brush> t-border-color-selected;
    in-out property <brush> t-border-color-selected-hover;
    in-out property <brush> t-border-color-selected-active;
    in-out property <brush> t-text-color;
    in-out property <brush> t-text-color-hover;
    in-out property <brush> t-text-color-selected;
    in-out property <brush> t-text-color-selected-hover;
    in-out property <brush> t-text-color-selected-active;
    in-out property <length> t-font-size: UAppTheme.font-size-base;
    in-out property <length> t-padding-vertical: UAppTheme.padding-vertical;
    in-out property <length> t-padding-horizontal: UAppTheme.padding-horizontal;
	// Regular properties
	in-out property <URadioButtonVariant> variant: default;
    in-out property <[string]> options;
    in-out property <string> selected-value: options[0];
    callback selected(value: string);
    HorizontalLayout {
        for option[idx] in root.options: ButtonInterface {
            background: t-background;
            border-width: t-border-width;
            border-color: t-border-color;
            init => {
                if idx == 0 {
                    self.border-top-left-radius = t-border-radius;
                    self.border-bottom-left-radius = t-border-radius;
                } else if idx == options.length - 1 {
                    self.border-top-right-radius = t-border-radius;
                    self.border-bottom-right-radius = t-border-radius;
                }
            }
            clicked => {
                selected-value = option;
                root.selected(option);
            }
            HorizontalLayout {
                alignment: center;
                padding-top: t-padding-vertical;
                padding-bottom: t-padding-vertical;
                padding-left: t-padding-horizontal;
                padding-right: t-padding-horizontal;
                VerticalLayout {
                    alignment: center;
                    option-text := UText {
                        text: option;
                        color: t-text-color;
                        font-size: t-font-size;
                        animate color {
                            easing: ease;
                            duration: 200ms;
                        }
                    }
                }
            }

            states [
                focus-not-selected-hover when self.has-focus && selected-value != option && self.has-hover: {
                    border-width: UAppTheme.focus-border-width;
                    border-color: UAppTheme.focus-color;
                    background: t-background-hover;
                    option-text.color: t-text-color-hover;
                }
                focus-selected-hover when self.has-focus && selected-value == option && self.has-hover: {
                    border-width: UAppTheme.focus-border-width;
                    border-color: UAppTheme.focus-color;
                    background: t-background-selected-hover;
                    option-text.color: t-text-color-selected-hover;
                }
                focus-selected when self.has-focus && selected-value == option: {
                    border-width: UAppTheme.focus-border-width;
                    border-color: UAppTheme.focus-color;
                    background: t-background-selected;
                    option-text.color: t-text-color-selected;
                }
                focus when self.has-focus: {
                    border-width: UAppTheme.focus-border-width;
                    border-color: UAppTheme.focus-color;
                }
                active-selected when self.pressed && selected-value == option: {
                    background: t-background-selected-active;
                    border-color: t-border-color-selected-active;
                    option-text.color: t-text-color-selected-active;
                }
                hover-not-selected when self.has-hover && selected-value != option: {
                    background: t-background-hover;
                    border-color: t-border-color-hover;
                    option-text.color: t-text-color-hover;
                }
                hover-selected when self.has-hover && selected-value == option: {
                    background: t-background-selected-hover;
                    border-color: t-border-color-selected-hover;
                    option-text.color: t-text-color-selected-hover;
                }
                selected when selected-value == option: {
                    background: t-background-selected;
                    border-color: t-border-color-selected;
                    option-text.color: t-text-color-selected;
                }
            ]
        }
    }

    states [
        default when variant == URadioButtonVariant.default: {
            t-border-color: UAppTheme.border;
            t-border-color-hover: UAppTheme.border;
            t-border-color-selected: UAppTheme.primary;
            t-border-color-selected-hover: UAppTheme.primary-hover;
            t-border-color-selected-active: UAppTheme.primary-active;
            t-text-color: UAppTheme.text;
            t-text-color-hover: UAppTheme.primary;
            t-text-color-selected: UAppTheme.primary;
            t-text-color-selected-hover: UAppTheme.primary-hover;
            t-text-color-selected-active: UAppTheme.primary-active;
        }
        primary when variant == URadioButtonVariant.primary: {
            t-background-selected: UAppTheme.primary;
            t-background-selected-hover: UAppTheme.primary-hover;
            t-background-selected-active: UAppTheme.primary-active;
            t-border-color: UAppTheme.border;
            t-border-color-hover: UAppTheme.border;
            t-border-color-selected: UAppTheme.primary;
            t-border-color-selected-hover: UAppTheme.primary-hover;
            t-border-color-selected-active: UAppTheme.primary-active;
            t-text-color: UAppTheme.text;
            t-text-color-hover: UAppTheme.primary;
            t-text-color-selected: Colors.white;
            t-text-color-selected-hover: Colors.white;
            t-text-color-selected-active: Colors.white;
        }
    ]
}
