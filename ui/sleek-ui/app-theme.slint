import { UPrimaryColors } from "colors.slint";
import { UThemeColor, UVariantsColor, UColorSchemeVariantsColor } from "structs/colors.slint";
import { Palette } from "std-widgets.slint";


export enum UColorScheme {
	light,
	dark,
	system,
}

export global UAppTheme {
    in-out property <float> scale-factor: 1;

    // Color scheme management.
    in-out property <UColorScheme> color-scheme: system;
    public pure function get-themed-color(c: UThemeColor) -> brush {
        if color-scheme == UColorScheme.light {
            return c.light;
        } else if color-scheme == UColorScheme.dark {
            return c.dark;
        }
        return Palette.color-scheme == ColorScheme.dark ? c.dark : c.light;
    }

    public pure function get-variants-color(c: UColorSchemeVariantsColor) -> UVariantsColor {
        if color-scheme == UColorScheme.light {
            return c.light;
        } else if color-scheme == UColorScheme.dark {
            return c.dark;
        }
        return Palette.color-scheme == ColorScheme.dark ? c.dark : c.light;
    }

    in-out property <UVariantsColor> primary: get-variants-color(UPrimaryColors.daybreak-blue);
    in-out property <UVariantsColor> success: get-variants-color(UPrimaryColors.success);
    in-out property <UVariantsColor> warning: get-variants-color(UPrimaryColors.warning);
    in-out property <UVariantsColor> danger: get-variants-color(UPrimaryColors.danger);

    // Background color
	in-out property <color> bg-layout: get-themed-color({ light: #F5F5F5, dark: black });
    in-out property <color> bg-container: get-themed-color({ light: white, dark: #141414 });
    in-out property <color> bg-elevated: get-themed-color({ light: white, dark: #1f1f1f });
    in-out property <color> bg-inverse: get-themed-color({ light: #262626, dark: #424242 });

    // Color fill
    in-out property <color> color-fill-plus: get-themed-color({ light: rgba(0, 0, 0, 0.25), dark: rgba(255,255,255, 0.28) });
    in-out property <color> color-fill: get-themed-color({ light: rgba(0, 0, 0, 0.15), dark: rgba(255,255,255, 0.18) });
    in-out property <color> color-fill-secondary: get-themed-color({ light: rgba(0, 0, 0, 0.06), dark: rgba(255,255,255, 0.12) });
    in-out property <color> color-fill-tertiary: get-themed-color({ light: rgba(0, 0, 0, 0.04), dark: rgba(255,255,255, 0.08) });
    in-out property <color> color-fill-quaternary: get-themed-color({ light: rgba(0, 0, 0, 0.02), dark: rgba(255,255,255, 0.04) });
	
    // Shadow
    in-out property <color> shadow-color: get-themed-color({ light: rgba(0, 0, 0, 0.12), dark: rgba(0, 0, 0, 0.12) });
    in-out property <length> shadow-blur: 16px * scale-factor;
    in-out property <length> shadow-x-offset: 0px * scale-factor;
    in-out property <length> shadow-y-offset: 6px * scale-factor;

    // Focus display
    in-out property <color> focus-color: get-themed-color({ light: black, dark: white });
    in-out property <length> focus-border-width: 2px * scale-factor;

    // Text color
    in-out property <color> inverse-text: get-themed-color({ light: rgba(255,255,255,0.85), dark: rgba(0,0,0,0.88) });
    in-out property <color> text: get-themed-color({ light: #000000E0, dark: #FFFFFFD9 });
    in-out property <color> text-secondary: get-themed-color({ light: #000000A6, dark: #FFFFFFA6 });
    in-out property <color> text-heading: get-themed-color({ light: #000000E0, dark: #FFFFFFD9 });
    in-out property <color> text-disabled: get-themed-color({ light: #00000040, dark: #FFFFFF40 });

    // Font size
    in-out property <length> font-size-smaller: 10px * scale-factor;
    in-out property <length> font-size-small: 12px * scale-factor;
    in-out property <length> font-size-base: 14px * scale-factor;
    in-out property <length> font-size-medium: 16px * scale-factor;
    in-out property <length> font-size-big: 18px * scale-factor;
    in-out property <length> font-size-bigger: 20px * scale-factor;

    // Borders
	in-out property <length> border-width-base: 1px * scale-factor;
    in-out property <color> border: get-themed-color({ light: #D9D9D9, dark: #424242 });
    in-out property <color> border-secondary: get-themed-color({ light: #f0f0f0, dark: #303030 });
    in-out property <color> separator: get-themed-color({ light: #0505050F, dark: #FDFDFD1F });

    // Icons
    in-out property <length> icon-size-base: 16px * scale-factor;

    // Padding
    in-out property <length> padding-vertical: 5px * scale-factor;
    in-out property <length> padding-horizontal: 14px * scale-factor;
    in-out property <length> padding-small: 2px * scale-factor;
    in-out property <length> padding-base: 4px * scale-factor;
    in-out property <length> padding-medium: 8px * scale-factor;
    in-out property <length> padding-big: 12px * scale-factor;
    in-out property <length> padding-bigger: 16px * scale-factor;

    // Spacing
    in-out property <length> spacing-small: 2px * scale-factor;
    in-out property <length> spacing-base: 4px * scale-factor;
    in-out property <length> spacing-medium: 8px * scale-factor;
    in-out property <length> spacing-big: 12px * scale-factor;
    in-out property <length> spacing-bigger: 16px * scale-factor;

    // Radius
    in-out property <length> radius-small: 2px * scale-factor;
    in-out property <length> radius-base: 4px * scale-factor;
    in-out property <length> radius-medium: 8px * scale-factor;
    in-out property <length> radius-large: 12px * scale-factor;
    in-out property <length> radius-round: 20px * scale-factor;
    in-out property <length> radius-circle: 9999px;
}
